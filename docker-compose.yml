version: '3'
services:
  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    # volumes:
    #   - './services/frontend:/usr/share/nginx/html/frontend'
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
    ports:
      - "8080:80"
    healthcheck:
      # test: ["CMD-SHELL", "curl http://localhost:80/healthcheck/ | grep -ine Frontend"]
      test: ["CMD-SHELL", "nc -vz frontend 80 | echo 0 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
    restart: on-failure
    depends_on:
      - api
    networks:
      - api_nw
      
  api:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    volumes:
      - './services/api:/api'
    ports:
      - "5000:5000"
    environment:
      FLASK_APP: app
      FLASK_ENV: development
      ENVIRONMENT: compose
      APP_SETTINGS: src.config.DevelopmentConfig
      DATABASE_URL: postgresql://postgres:postgres@db:5432/online_exam
      DATABASE_TEST_URL: postgresql://postgres:postgres@db:5432/online_exam_test
      MONGO_URL: mongodb://root:root@mongodb:27017/mydatabase?authSource=admin
      MONGO_TEST_URL: mongodb://root:root@mongodb:27017/mydatabase_test?authSource=admin
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGODB_AUTH_SOURCE: admin
      MONGO_INITDB_DATABASE: mydatabase
      REDIS_OM_URL: redis://@redis:6379
      SECRET_KEY: lostinthesauce
    stop_signal: SIGINT
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      # test: ["CMD-SHELL", "curl http://localhost/api/healthcheck/ | grep -ine '200 OK' || exit 1"]
      test: ["CMD-SHELL", "nc -vz api 80 | echo 0 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - api_nw
      - db_nw

  db:
    build: 
      context: ./services/db
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: online_exam
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - db_nw

  mongodb:
    build:
      context: ./services/mongodb
      dockerfile: Dockerfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: mydatabase
      MONGO_DATA_DIR: /data/db
      MONGO_LOG_DIR: /dev/null
    volumes:
      - './services/mongodb/data/db:/data/db'
    ports:
      - 27017
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    env_file: .env
    networks:
      - db_nw

  redis:
    build:
      context: ./services/redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
    - db_nw

  redisinsight:
    build:
      context: ./services/redisinsight
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD-SHELL","curl localhost:8001/healthcheck/ | grep -i ok"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - db_nw

  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile.dev
    ports:
      - "80:80"
    command: /bin/sh -c "envsubst 'api:5000' < /etc/nginx/conf.d/dev.conf > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    healthcheck:
      test: ["CMD-SHELL", "nginx -t && echo 0 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    depends_on:
      - api
      - frontend
    networks:
      - api_nw



networks:
  api_nw:
    driver: bridge
  db_nw:
    driver: bridge
    